# @format
---
#============== MASTER MYSQL
- name: Tampilkan inventory_hostname
  debug:
    msg: "Hostname: {{ group_names }}"
  when: "'mysql_master_new' in group_names"

- name: Get IP used by bastion for mysql access
  debug:
    msg: "{{ ansible_fqdn }} / {{ ansible_default_ipv4.address }}"

- name: Create replication user
  community.mysql.mysql_user:
    login_user: root
    name: "{{ mysql_repl_user }}"
    password: "{{ mysql_repl_password }}"
    priv: "*.*:REPLICATION SLAVE"
    host: "{{ hostvars[groups['mysql_slave_new'][0]]['ansible_fqdn'] }}"
    state: present
    # login_password: "{{ mysql_root_password }}"
    # atau jika root MySQL tanpa password, bisa hilangkan login_password
    login_unix_socket: /var/run/mysqld/mysqld.sock
  ignore_errors: yes
  when: "'mysql_master_new' in group_names"

- name: Flush MySQL privileges
  community.mysql.mysql_user:
    name: "{{ mysql_repl_user }}"
    host: "%"
    state: present
    priv: "*.*:REPLICATION SLAVE"
    login_user: root
    login_unix_socket: /var/run/mysqld/mysqld.sock
    check_implicit_admin: true
  when: "'mysql_master_new' in group_names"

- name: Set bind-address to 0.0.0.0
  lineinfile:
    path: /etc/mysql/mysql.conf.d/mysqld.cnf
    regexp: "^bind-address"
    line: "bind-address = 0.0.0.0"
  notify: Restart mysql
  when: "'mysql_master_new' in group_names"

#want replicat db specific include binlog_do_db
- name: Configure MySQL replication settings
  blockinfile:
    path: /etc/mysql/mysql.conf.d/mysqld.cnf # file terpisah lebih aman
    create: yes
    block: |
      server-id = {{ ('mysql_master_new' in group_names) | ternary(1, 2) }}
      log_bin = /var/log/mysql/mysql-bin.log
  notify: Restart mysql
  when: "'mysql_master_new' in group_names"

#jika db tertentu maka uncomment di bawah ini
# - name: Configure MySQL replication settings
#   blockinfile:
#     path: /etc/mysql/mysql.conf.d/mysqld.cnf # file terpisah lebih aman
#     create: yes
#     block: |
#       server-id = {{ ('mysql_master_new' in group_names) | ternary(1, 2) }}
#       log_bin = /var/log/mysql/mysql-bin.log
#       binlog_do_db = "{{ test_db_name }}"
#   notify: Restart mysql
#   when: "'mysql_master_new' in group_names"

- name: Force restart mysql immediately after config
  service:
    name: mysql
    state: restarted
  when: "'mysql_master_new' in group_names"

- name: Wait for MySQL to be fully ready
  wait_for:
    port: 3306
    delay: 5
    timeout: 30
- name: Get master status
  command: mysql -uroot -e "SHOW MASTER STATUS\\G"
  register: mysql_master_new_status_output
  delegate_to: "{{ groups['mysql_master_new'][0] }}"
  run_once: true
  when: "'mysql_master_new' in group_names"

- name: Set binlog facts
  set_fact:
    binlog_file: "{{ mysql_master_new_status_output.stdout_lines | select('search', 'File:') | first | regex_replace('File:\\s*', '') | trim }}"
    binlog_pos: "{{ mysql_master_new_status_output.stdout_lines | select('search', 'Position:') | first | regex_replace('Position:\\s*', '') | trim }}"
  run_once: true
  when: "'mysql_master_new' in group_names"

- name: Share master status to all hosts
  add_host:
    name: "mysql_master_new_facts"
    binlog_file: "{{ binlog_file }}"
    binlog_pos: "{{ binlog_pos }}"
  when: "'mysql_master_new' in group_names"
